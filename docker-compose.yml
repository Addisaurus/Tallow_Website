# Docker Compose Configuration for Tallow & Co. E-Commerce Website
# This file orchestrates multiple services: Flask app, PostgreSQL database, and Nginx reverse proxy

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    container_name: tallow_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tallow_db}
      POSTGRES_USER: ${POSTGRES_USER:-tallow_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
    ports:
      # Expose PostgreSQL port (optional - for direct database access during development)
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tallow_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tallow_network

  # Flask Application Service
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tallow_flask
    restart: unless-stopped
    environment:
      # Flask Configuration
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY}

      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-tallow_user}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-tallow_db}

      # Stripe Configuration
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}

      # Email Configuration (Optional)
      MAIL_SERVER: ${MAIL_SERVER:-}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USE_TLS: ${MAIL_USE_TLS:-true}
      MAIL_USERNAME: ${MAIL_USERNAME:-}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-}
    volumes:
      # Mount static files for Nginx to serve
      - ./static:/app/static:ro
      # Mount instance folder for SQLite fallback (if needed)
      - ./instance:/app/instance
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8000"
    networks:
      - tallow_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy Service
  nginx:
    image: nginx:alpine
    container_name: tallow_nginx
    restart: unless-stopped
    ports:
      # HTTP port
      - "80:80"
      # HTTPS port (uncomment when you have SSL certificates)
      # - "443:443"
    volumes:
      # Nginx configuration
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # Static files (served directly by Nginx for better performance)
      - ./static:/app/static:ro
      # SSL certificates (uncomment and add your certificates for HTTPS)
      # - ./ssl:/etc/nginx/ssl:ro
      # Logs
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - tallow_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

# Named Volumes (Persistent Data)
volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local

# Networks
networks:
  tallow_network:
    driver: bridge

# Usage Instructions:
#
# 1. Create a .env file with your environment variables:
#    cp .env.example .env
#    # Then edit .env with your actual values
#
# 2. Start all services:
#    docker-compose up -d
#
# 3. View logs:
#    docker-compose logs -f
#
# 4. Stop all services:
#    docker-compose down
#
# 5. Stop and remove all data:
#    docker-compose down -v
#
# 6. Run database migrations:
#    docker-compose exec web flask db upgrade
#
# 7. Access the application:
#    http://localhost
